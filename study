package main

import (
	"log"
	"net"
	"net/http"
	"net/rpc"
	"testing"
	//"reflect"
	//"time"
)

const (
	ServerHTTP = 0
	ServerTCP = 1
)

type Args struct {
	C string
}

type Foo int

func (t *Foo) Dummy(args *Args, reply *string) error {
	*reply = "hello " + args.C
	return nil
}

var ln net.Listener

//func BenchmarkHttpSync(b *testing.B) {
//	done := make(chan bool, 10)
//	//fmt.Println("start Http RPC")
//	startRPC(ServerHTTP, nil)
//
//	b.ResetTimer()
//	for i := 0; i < b.N; i++ {
//		for i := 0; i < 10; i++ {
//			go clientSync(ServerHTTP, done)
//		}
//		for i := 0; i < 10; i++ {
//			<-done
//		}
//	}
//}
//
//func BenchmarkHttpAsync(b *testing.B) {
//	done := make(chan bool, 10)
//	//fmt.Println("start Http RPC")
//	startRPC(ServerHTTP, nil)
//	
//	b.ResetTimer()
//	for i := 0; i < b.N; i++ {
//		for i := 0; i < 10; i++ {
//			go clientAsync(ServerHTTP, done)
//		}
//		for i := 0; i < 10; i++ {
//			<-done
//		}
//	}
//}

func BenchmarkTCPSync(b *testing.B) {
	done := make(chan bool, 10)
	stop := make(chan bool, 1)
	log.Println("start Http RPC")
	startRPC(ServerTCP, stop)

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		for i := 0; i < 10; i++ {
			go clientSync(ServerTCP, done)
		}
		for i := 0; i < 10; i++ {
			<-done
		}
	}
	stop <- true
}

//func BenchmarkTCPAsync(b *testing.B) {
//	done := make(chan bool, 10)
//	//fmt.Println("start Http RPC")
//	startRPC(ServerTCP, &ln)
//
//	b.ResetTimer()
//	for i := 0; i < b.N; i++ {
//		for i := 0; i < 10; i++ {
//			go clientAsync(ServerTCP, done)
//		}
//		for i := 0; i < 10; i++ {
//			<-done
//		}
//	}
//	ln.Close()
//}

func startRPC(stype int, stop chan bool) {
	//start = true
	foo := new(Foo)

	rpc.Register(foo)
	if stype == ServerHTTP {
		http.DefaultServeMux = http.NewServeMux()
		rpc.HandleHTTP()
		go http.ListenAndServe(":1234", nil)
	}
	if stype == ServerTCP {
		log.Println("listen")
		//var err error
		ln, err := net.Listen("tcp", "localhost:2341")
		if err != nil {
			log.Fatal("listen error:", err)
		}

		go func() {
			for {
				select {
				case <-stop:
					log.Println("close")
					ln.Close()
					return
				default:
					conn, err := ln.Accept()
					if err != nil {
						log.Fatal("Accept error:", err)
					}
					go rpc.ServeConn(conn)
				}
			}
		}()
	}
}


func clientDial(stype int) *rpc.Client {
	if stype == ServerHTTP {
		client, err := rpc.DialHTTP("tcp", ":1234")
		if err != nil {
			log.Fatal("diaHTTP fail:", err)
		}
		return client
	}

	//TCP
	client, err := rpc.Dial("tcp", "localhost:2341")
	if err != nil {
		log.Fatal("dialTCP fail:", err)
	}
	return client
}

func clientSync(stype int, done chan bool) {
	client := clientDial(stype)
	defer client.Close()

	args := &Args{"yifan"}
	var reply string

	err := client.Call("Foo.Dummy", args, &reply)
	if err != nil {
		log.Fatal("Dummy error:", err)
	}
	//log.Println(reply)
	done <- true
}

func clientAsync(stype int, done chan bool) {
	client := clientDial(stype)
	defer client.Close()

	args := &Args{"yifan"}
	var reply string

	call := client.Go("Foo.Dummy", args, &reply, nil)
	<-call.Done
	if call.Error != nil {
		log.Fatal("Dummy error:", call.Error)
	}
	//fmt.Println(reply)
	done <- true
}
